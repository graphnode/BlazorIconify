@inherits TestContext
@code
{
    [Fact(DisplayName = "Icon Render")]
    public void IconRender()
    {
        Services.AddBlazorIconify();

        var cut = Render(@<Iconify Name="mdi:home" />);

        cut.WaitForElement("svg", TimeSpan.FromSeconds(5));

        cut.MarkupMatches(@<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24">
            <path fill="currentColor" d="M10 20v-6h4v6h5v-8h3L12 3L2 12h3v8z"></path>
        </svg>);
    }

    [Fact(DisplayName = "Icon Render Without Fetching")]
    public void IconRenderWithoutFetching()
    {
        Services.AddBlazorIconify((options) =>
        {
            options.EnableRemoteFetching = false;
        });

        var cut = Render(@<Iconify Name="mdi:home" />);

        cut.WaitForElement("svg", TimeSpan.FromSeconds(5));

        cut.MarkupMatches(@<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24">
            <path fill="currentColor" d="M10 20v-6h4v6h5v-8h3L12 3L2 12h3v8z"></path>
        </svg>);
    }

    [Fact(DisplayName = "Icon Render With Class")]
    public void IconWithClass()
    {
        Services.AddBlazorIconify();

        var cut = Render(@<Iconify Name="mdi:home" Class="test" />);

        cut.WaitForElement("svg", TimeSpan.FromSeconds(5));

        cut.MarkupMatches(@<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24" class="test">
            <path fill="currentColor" d="M10 20v-6h4v6h5v-8h3L12 3L2 12h3v8z"></path>
        </svg>);
    }

    [Fact(DisplayName = "Icon Render With OnClick Event")]
    public void IconWithOnClickEvent()
    {
        Services.AddBlazorIconify();

        // Create a flag to track when the event is triggered
        var clickHandlerCalled = false;

        // Define a click handler that updates the flag
        void ClickHandler() => clickHandlerCalled = true;

        var cut = Render(@<Iconify Name="mdi:mouse-left-click" @onclick="ClickHandler" />);

        cut.WaitForElement("svg", TimeSpan.FromSeconds(5));

        cut.MarkupMatches(@<svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24">
                <path fill="currentColor" d="M13 9V1.07c3.94.49 7 3.85 7 7.93zM6.34 20.66A8 8 0 0 1 4 15v-4h16v4c0 2.12-.84 4.16-2.34 5.66A8 8 0 0 1 12 23c-2.12 0-4.16-.84-5.66-2.34M11 9V1.07A8.01 8.01 0 0 0 4.25 7C4.09 7.64 4 8.31 4 9zM6.34 7C6.82 5.65 7.78 4.5 9 3.81V7z"/>
        </svg>);

        // Verify the flag is false before clicking
        Assert.False(clickHandlerCalled);

        // Trigger the click event
        var iconElement = cut.Find("svg");
        iconElement.Click();

        // Verify the flag is now true, confirming the event was triggered
        Assert.True(clickHandlerCalled);
    }
}
